{"remainingRequest":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js??ref--13-0!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/httpUtil/HttpUtil.js","dependencies":[{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/httpUtil/HttpUtil.js","mtime":1551064484000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/cache-loader/dist/cjs.js","mtime":1550646442000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js","mtime":1550646421000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js","mtime":1550646431000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\nimport axios from \"axios\";\nimport AppConfig from '../config/AppConfig';\nimport ApiConfig from '../config/ApiConfig';\n/**\n * \n */\n\nvar HttpUtil =\n/*#__PURE__*/\nfunction () {\n  function HttpUtil() {\n    _classCallCheck(this, HttpUtil);\n\n    if (HttpUtil.instantiation) {\n      throw new Error(\"This class has been instantiated and can be retrieved using the 'HttpUtil.getHttpUtil()' method.\");\n    }\n\n    this.ApiConfig = new ApiConfig();\n    /** 初始化网络请求 **/\n\n    var appConfig = AppConfig.getAppConfig();\n    var httpConfig = appConfig.getConfigData(\"httpConfig\");\n    axios.defaults.headers.post['Content-Type'] = httpConfig.contentType;\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = httpConfig.AccessControlAllowOrigin;\n    this.$http = axios.create({\n      baseURL: appConfig.getAppGateway(),\n      timeout: httpConfig.httpTimeout,\n      withCredentials: false // default\n\n    });\n  } // constructor\n\n  /**\n   * 批量获取请求，等待所有请求都返回是触发\n   * @param {请求参数数组} queryInfoArray  [{method,apiCode,queryParams,submitData},{...},...]\n   */\n\n\n  _createClass(HttpUtil, [{\n    key: \"getAppBatchData\",\n    value: function getAppBatchData(queryInfoArray) {\n      var _this = this;\n\n      var queryPromiseArr = [];\n\n      if (queryInfoArray && queryInfoArray instanceof Array) {\n        queryInfoArray.array.forEach(function (item) {\n          queryPromiseArr.push(_this.getAppData(item.method, item.apiCode, item.queryParams, item.submitData));\n        });\n      }\n\n      return this.$http.all(queryPromiseArr);\n    }\n    /**\n     * 获取网络数据\n     * @param {域名或者微服务名，默认为appConfig} domain \n     * @param {请求方法 GET,POST,DEL,PUT} method\n     * @param {apiCode中配置的Code} apiCode\n     * @param {URL请求URL参数} queryParams\n     * @param {POST请求是携带的参数} submitData \n     */\n\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var domain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"app\";\n      var method = arguments.length > 1 ? arguments[1] : undefined;\n      var apiCode = arguments.length > 2 ? arguments[2] : undefined;\n      var queryParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var submitData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var apiInfo = null;\n      var promise = null; //获取Api信息\n\n      apiInfo = this.ApiConfig.getApiInfo(domain.toLowerCase(), method, apiCode); //加工构建Api信息\n\n      apiInfo = this.restfulProcess(apiInfo, queryParams); //构建网络请求并且返回Promise对象\n\n      promise = this.buildHttpQuery(method, apiInfo, queryParams, submitData); //\n\n      return promise;\n    }\n    /**\n     * 构建HTTP请求，并且返回一个Promise对象\n     * @param {HTTP请求方式} method \n     * @param {Api信息} apiInfo \n     * @param {请求参数} queryParams \n     * @param {提交数据} submitData \n     */\n\n  }, {\n    key: \"buildHttpQuery\",\n    value: function buildHttpQuery(method, apiInfo, queryParams, submitData) {\n      method = method.toUpperCase();\n      var promise = null;\n\n      switch (method) {\n        case \"POST\":\n          //构建POST请求\n          var queryParamsStr = this.queryStringify(apiInfo, queryParams);\n          promise = this.$http.post(apiInfo.url + queryParamsStr, submitData);\n          break;\n\n        case \"GET\":\n          //构建GET请求\n          promise = this.$http.get(apiInfo.url, {\n            params: queryParams,\n            data: submitData\n          });\n          break;\n\n        case \"DEL\":\n          //构建DEL请求\n          break;\n\n        case \"PUT\":\n          //构建PUT请求\n          break;\n\n        default:\n          //默认为GET请求\n          promise = this.$http.get(apiInfo.url, {\n            params: queryParams,\n            data: submitData\n          });\n          break;\n      }\n\n      return promise;\n    }\n    /** \n     * RESTFulurl结构处理\n     * @param {ApiConfig 配置信息} ApiConfig\n     */\n    //\"/user/{userid}/kkk/list/{abcde}/ddd\".match(/\\{\\w+\\}/g)\n\n  }, {\n    key: \"restfulProcess\",\n    value: function restfulProcess(apiInfo, queryParams) {\n      var result = apiInfo;\n\n      if (apiInfo && apiInfo.hasOwnProperty(\"url\")) {\n        var tempUrl = apiInfo.url;\n        var params = tempUrl.match(/\\{\\w+\\}/g);\n\n        if (params) {\n          params.forEach(function (item) {\n            var propKey = item.replace(\"{\", \"\").replace(\"}\", \"\");\n\n            if (queryParams && queryParams.hasOwnProperty(propKey)) {\n              tempUrl = tempUrl.replace(\"{\" + propKey + \"}\", queryParams[propKey]);\n            }\n          });\n        }\n\n        apiInfo.url = tempUrl;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"queryStringify\",\n    value: function queryStringify(apiInfo, queryParams) {\n      var queryParamsStr = \"\";\n\n      if (queryParams) {\n        if (apiInfo && apiInfo.url.indexOf(\"?\") > -1) {\n          queryParamsStr = \"&\";\n        } else {\n          queryParamsStr = \"?\";\n        }\n\n        for (var p in queryParams) {\n          queryParamsStr += \"&\" + p + \"=\" + queryParams[p];\n        }\n      }\n\n      return queryParamsStr;\n    }\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"getAppData\",\n    value: function getAppData(apiCode) {\n      var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var submitData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.getData(\"APP\", \"GET\", apiCode, queryParams, submitData);\n    }\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"postAppData\",\n    value: function postAppData(apiCode) {\n      var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var submitData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.getData(\"APP\", \"POST\", apiCode, queryParams, submitData);\n    }\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"getDevData\",\n    value: function getDevData(apiCode) {\n      var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var submitData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.getData(\"DEV\", \"GET\", apiCode, queryParams, submitData);\n    }\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"postDevData\",\n    value: function postDevData(apiCode) {\n      var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var submitData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.getData(\"DEV\", \"POST\", apiCode, queryParams, submitData);\n    }\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"getAdmData\",\n    value: function getAdmData(apiCode) {\n      var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var submitData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.getData(\"ADM\", \"GET\", apiCode, queryParams, submitData);\n    }\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"postAdmData\",\n    value: function postAdmData(apiCode) {\n      var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var submitData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return this.getData(\"ADM\", \"POST\", apiCode, queryParams, submitData);\n    }\n  }], [{\n    key: \"getHttpUtil\",\n    value: function getHttpUtil() {\n      if (!HttpUtil.instantiation) {\n        HttpUtil.instantiation = new HttpUtil();\n      }\n\n      return HttpUtil.instantiation;\n    }\n  }]);\n\n  return HttpUtil;\n}();\n\nexport default HttpUtil;",{"version":3,"sources":["src/httpUtil/HttpUtil.js"],"names":["axios","AppConfig","ApiConfig","HttpUtil","instantiation","Error","appConfig","getAppConfig","httpConfig","getConfigData","defaults","headers","post","contentType","AccessControlAllowOrigin","$http","create","baseURL","getAppGateway","timeout","httpTimeout","withCredentials","queryInfoArray","queryPromiseArr","Array","array","forEach","push","getAppData","item","method","apiCode","queryParams","submitData","all","domain","apiInfo","promise","getApiInfo","toLowerCase","restfulProcess","buildHttpQuery","toUpperCase","queryParamsStr","queryStringify","url","get","params","data","result","hasOwnProperty","tempUrl","match","propKey","replace","indexOf","p","getData"],"mappings":"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","sourceRoot":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web","sourcesContent":["import axios from \"axios\";\nimport AppConfig from '../config/AppConfig';\nimport ApiConfig  from '../config/ApiConfig';\n\n/**\n * \n */\nclass HttpUtil {\n\n    constructor(){\n        if (HttpUtil.instantiation){\n            throw new Error(\"This class has been instantiated and can be retrieved using the 'HttpUtil.getHttpUtil()' method.\");\n        }\n        this.ApiConfig = new ApiConfig();\n        /** 初始化网络请求 **/\n        var appConfig = AppConfig.getAppConfig();\n        var httpConfig = appConfig.getConfigData(\"httpConfig\");\n        axios.defaults.headers.post['Content-Type'] = httpConfig.contentType;\n        axios.defaults.headers.post['Access-Control-Allow-Origin'] = httpConfig.AccessControlAllowOrigin;\n        this.$http  = axios.create({\n            baseURL: appConfig.getAppGateway(),\n            timeout: httpConfig.httpTimeout,\n            withCredentials: false // default\n        });\n    }// constructor\n\n    /**\n     * 批量获取请求，等待所有请求都返回是触发\n     * @param {请求参数数组} queryInfoArray  [{method,apiCode,queryParams,submitData},{...},...]\n     */\n    getAppBatchData(queryInfoArray){\n        let queryPromiseArr = [];\n        if (queryInfoArray && queryInfoArray instanceof Array){\n            queryInfoArray.array.forEach(item => {\n                queryPromiseArr.push(this.getAppData(item.method, item.apiCode,item.queryParams,item.submitData));\n            });\n        }\n        return this.$http.all(queryPromiseArr);\n    }\n\n\n    /**\n     * 获取网络数据\n     * @param {域名或者微服务名，默认为appConfig} domain \n     * @param {请求方法 GET,POST,DEL,PUT} method\n     * @param {apiCode中配置的Code} apiCode\n     * @param {URL请求URL参数} queryParams\n     * @param {POST请求是携带的参数} submitData \n     */\n    getData(domain=\"app\",method,apiCode,queryParams=null,submitData=null){\n        let apiInfo = null;\n        let promise = null;\n        //获取Api信息\n        apiInfo = this.ApiConfig.getApiInfo(domain.toLowerCase(), method, apiCode);\n        //加工构建Api信息\n        apiInfo = this.restfulProcess(apiInfo, queryParams);\n        //构建网络请求并且返回Promise对象\n        promise = this.buildHttpQuery(method, apiInfo,queryParams,submitData);//\n                \n        return promise;\n    }\n\n    /**\n     * 构建HTTP请求，并且返回一个Promise对象\n     * @param {HTTP请求方式} method \n     * @param {Api信息} apiInfo \n     * @param {请求参数} queryParams \n     * @param {提交数据} submitData \n     */\n    buildHttpQuery(method, apiInfo,queryParams,submitData){\n        method = method.toUpperCase();\n        let promise = null;\n        switch (method) {\n            case \"POST\":\n                //构建POST请求\n                var queryParamsStr = this.queryStringify(apiInfo, queryParams);\n                promise = this.$http.post(apiInfo.url + queryParamsStr, submitData);\n                break;\n            case \"GET\":\n                //构建GET请求\n                promise = this.$http.get(apiInfo.url, {\n                    params: queryParams,\n                    data: submitData\n                });\n                break;\n            case \"DEL\":\n                //构建DEL请求\n                break;\n            case \"PUT\":\n                //构建PUT请求\n                break;\n            default:\n                //默认为GET请求\n                promise = this.$http.get(apiInfo.url, {\n                    params: queryParams,\n                    data: submitData\n                });\n                break;\n        }\n        return promise;\n    }\n\n    /** \n     * RESTFulurl结构处理\n     * @param {ApiConfig 配置信息} ApiConfig\n     */\n    //\"/user/{userid}/kkk/list/{abcde}/ddd\".match(/\\{\\w+\\}/g)\n    restfulProcess(apiInfo,queryParams){\n        let result = apiInfo;\n        if (apiInfo && apiInfo.hasOwnProperty(\"url\")){\n            let tempUrl = apiInfo.url;\n            let params = tempUrl.match(/\\{\\w+\\}/g);\n            if (params){\n                params.forEach(item => {\n                    let propKey = item.replace(\"{\",\"\").replace(\"}\",\"\");\n                    if (queryParams && queryParams.hasOwnProperty(propKey)){\n                        tempUrl = tempUrl.replace(\"{\" + propKey + \"}\", queryParams[propKey])\n                    }\n                });\n            }\n            apiInfo.url = tempUrl;\n        }\n        return result;\n    }\n\n    queryStringify(apiInfo, queryParams) {\n        var queryParamsStr = \"\";\n        if (queryParams) {\n            if (apiInfo && apiInfo.url.indexOf(\"?\") > -1) {\n                queryParamsStr = \"&\"\n            } else {\n                queryParamsStr = \"?\"\n            }\n            for (var p in queryParams) {\n                queryParamsStr += \"&\" + p + \"=\" + queryParams[p]\n            }\n        }\n        return queryParamsStr\n    }\n\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    getAppData(apiCode, queryParams=null, submitData=null) {\n        return this.getData(\"APP\", \"GET\", apiCode, queryParams, submitData);\n    }\n\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    postAppData(apiCode, queryParams=null, submitData=null) {\n        return this.getData(\"APP\", \"POST\", apiCode, queryParams, submitData);\n    }\n\n\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    getDevData(apiCode, queryParams = null, submitData = null) {\n        return this.getData(\"DEV\", \"GET\", apiCode, queryParams, submitData);\n    }\n\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    postDevData(apiCode, queryParams = null, submitData = null) {\n        return this.getData(\"DEV\", \"POST\", apiCode, queryParams, submitData);\n    }\n\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    getAdmData(apiCode, queryParams = null, submitData = null) {\n        return this.getData(\"ADM\", \"GET\", apiCode, queryParams, submitData);\n    }\n\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ApiConfig中对应APP域中配置的ApiCode} apiCode\n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    postAdmData(apiCode, queryParams = null, submitData = null) {\n        return this.getData(\"ADM\", \"POST\", apiCode, queryParams, submitData);\n    }\n    \n\n\n    static getHttpUtil(){\n        if (!HttpUtil.instantiation){\n            HttpUtil.instantiation = new HttpUtil();\n        }\n        return HttpUtil.instantiation;\n    }\n\n}\n\nexport default HttpUtil;"]}]}