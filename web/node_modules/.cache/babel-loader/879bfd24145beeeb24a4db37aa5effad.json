{"remainingRequest":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js??ref--13-0!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/httpUtil/HttpUtil.js","dependencies":[{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/httpUtil/HttpUtil.js","mtime":1532233367000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/cache-loader/dist/cjs.js","mtime":1550646442000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js","mtime":1550646421000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js","mtime":1550646431000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\nimport axios from \"axios\";\nimport AppConfig from '../config/AppConfig';\nimport ActionConfig from '../config/ActionConfig';\n/**\n * \n */\n\nvar HttpUtil =\n/*#__PURE__*/\nfunction () {\n  function HttpUtil() {\n    _classCallCheck(this, HttpUtil);\n\n    if (HttpUtil.instantiation) {\n      throw new Error(\"This class has been instantiated and can be retrieved using the 'HttpUtil.getHttpUtil()' method.\");\n    }\n\n    this.actionConfig = ActionConfig.getActionConfig();\n    /** 初始化网络请求 **/\n\n    var appConfig = AppConfig.getAppConfig();\n    var httpConfig = appConfig.getConfigData(\"httpConfig\");\n    axios.defaults.headers.post['Content-Type'] = httpConfig.contentType;\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = httpConfig.AccessControlAllowOrigin;\n    this.$http = axios.create({\n      baseURL: appConfig.getAppGateway(),\n      timeout: httpConfig.httpTimeout,\n      withCredentials: false // default\n\n    });\n  } // constructor\n\n  /**\n   * 批量获取请求，等待所有请求都返回是触发\n   * @param {请求参数数组} queryInfoArray  [{method,actionCode,queryParams,submitData},{...},...]\n   */\n\n\n  _createClass(HttpUtil, [{\n    key: \"getAppBatchData\",\n    value: function getAppBatchData(queryInfoArray) {\n      var _this = this;\n\n      var queryPromiseArr = [];\n\n      if (queryInfoArray && queryInfoArray instanceof Array) {\n        queryInfoArray.array.forEach(function (item) {\n          queryPromiseArr.push(_this.getAppData(item.method, item.actionCode, item.queryParams, item.submitData));\n        });\n      }\n\n      return this.$http.all(queryPromiseArr);\n    }\n    /**\n     * 获取网络数据\n     * @param {域名或者微服务名，默认为appConfig} domain \n     * @param {请求方法 GET,POST,DEL,PUT} method\n     * @param {ActionConfig中配置的Code} actionCode \n     * @param {URL请求URL参数} queryParams\n     * @param {POST请求是携带的参数} submitData \n     */\n\n  }, {\n    key: \"getData\",\n    value: function getData(domain, method, actionCode, queryParams, submitData) {\n      var actionInfo = null;\n      var promise = null;\n\n      switch (domain) {\n        case \"APP\":\n          //目前只有APP域\n          //获取Action信息\n          actionInfo = this.actionConfig.getAppActionInfo(method, actionCode); //加工构建Action信息\n\n          actionInfo = this.restfulProcess(actionInfo, queryParams); //构建网络请求并且返回Promise对象\n\n          promise = this.buildHttpQuery(method, actionInfo, queryParams, submitData); //\n\n          break;\n      }\n\n      return promise;\n    }\n    /**\n     * 构建HTTP请求，并且返回一个Promise对象\n     * @param {HTTP请求方式} method \n     * @param {Action信息} actionInfo \n     * @param {请求参数} queryParams \n     * @param {提交数据} submitData \n     */\n\n  }, {\n    key: \"buildHttpQuery\",\n    value: function buildHttpQuery(method, actionInfo, queryParams, submitData) {\n      method = method.toUpperCase();\n      var promise = null;\n\n      switch (method) {\n        case \"POST\":\n          //构建POST请求\n          var queryParamsStr = this.queryStringify(actionInfo, queryParams);\n          promise = this.$http.post(actionInfo.url + queryParamsStr, submitData);\n          break;\n\n        case \"GET\":\n          //构建GET请求\n          promise = this.$http.get(actionInfo.url, {\n            params: queryParams,\n            data: submitData\n          });\n          break;\n\n        case \"DEL\":\n          //构建DEL请求\n          break;\n\n        case \"PUT\":\n          //构建PUT请求\n          break;\n\n        default:\n          //默认为GET请求\n          promise = this.$http.get(actionInfo.url, {\n            params: queryParams,\n            data: submitData\n          });\n          break;\n      }\n\n      return promise;\n    }\n    /** \n     * RESTFulurl结构处理\n     * @param {actionConfig 配置信息} actionInfo \n     */\n    //\"/user/{userid}/kkk/list/{abcde}/ddd\".match(/\\{\\w+\\}/g)\n\n  }, {\n    key: \"restfulProcess\",\n    value: function restfulProcess(actionInfo, queryParams) {\n      var result = actionInfo;\n\n      if (actionInfo && actionInfo.hasOwnProperty(\"url\")) {\n        var tempUrl = actionInfo.url;\n        var params = tempUrl.match(/\\{\\w+\\}/g);\n\n        if (params) {\n          params.forEach(function (item) {\n            var propKey = item.replace(\"{\", \"\").replace(\"}\", \"\");\n\n            if (queryParams && queryParams.hasOwnProperty(propKey)) {\n              tempUrl = tempUrl.replace(\"{\" + propKey + \"}\", queryParams[propKey]);\n            }\n          });\n        }\n\n        actionInfo.url = tempUrl;\n      }\n\n      return result;\n    }\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ActionConfig中对应APP域中配置的ActionCode} actionCode \n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"getAppData\",\n    value: function getAppData(actionCode, queryParams, submitData) {\n      return this.getData(\"APP\", \"GET\", actionCode, queryParams, submitData);\n    }\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ActionConfig中对应APP域中配置的ActionCode} actionCode \n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n\n  }, {\n    key: \"postAppData\",\n    value: function postAppData(actionCode, queryParams, submitData) {\n      return this.getData(\"APP\", \"POST\", actionCode, queryParams, submitData);\n    }\n  }, {\n    key: \"queryStringify\",\n    value: function queryStringify(actionInfo, queryParams) {\n      var queryParamsStr = \"\";\n\n      if (queryParams) {\n        if (actionInfo && actionInfo.url.indexOf(\"?\") > -1) {\n          queryParamsStr = \"&\";\n        } else {\n          queryParamsStr = \"?\";\n        }\n\n        for (var p in queryParams) {\n          queryParamsStr += \"&\" + p + \"=\" + queryParams[p];\n        }\n      }\n\n      return queryParamsStr;\n    }\n  }], [{\n    key: \"getHttpUtil\",\n    value: function getHttpUtil() {\n      if (!HttpUtil.instantiation) {\n        HttpUtil.instantiation = new HttpUtil();\n      }\n\n      return HttpUtil.instantiation;\n    }\n  }]);\n\n  return HttpUtil;\n}();\n\nexport default HttpUtil;",{"version":3,"sources":["src/httpUtil/HttpUtil.js"],"names":["axios","AppConfig","ActionConfig","HttpUtil","instantiation","Error","actionConfig","getActionConfig","appConfig","getAppConfig","httpConfig","getConfigData","defaults","headers","post","contentType","AccessControlAllowOrigin","$http","create","baseURL","getAppGateway","timeout","httpTimeout","withCredentials","queryInfoArray","queryPromiseArr","Array","array","forEach","push","getAppData","item","method","actionCode","queryParams","submitData","all","domain","actionInfo","promise","getAppActionInfo","restfulProcess","buildHttpQuery","toUpperCase","queryParamsStr","queryStringify","url","get","params","data","result","hasOwnProperty","tempUrl","match","propKey","replace","getData","indexOf","p"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,YAAP,MAA0B,wBAA1B;AAEA;;;;IAGMC,Q;;;AAEF,sBAAa;AAAA;;AACT,QAAIA,SAASC,aAAb,EAA2B;AACvB,YAAM,IAAIC,KAAJ,CAAU,kGAAV,CAAN;AACH;;AACD,SAAKC,YAAL,GAAoBJ,aAAaK,eAAb,EAApB;AACA;;AACA,QAAIC,YAAYP,UAAUQ,YAAV,EAAhB;AACA,QAAIC,aAAaF,UAAUG,aAAV,CAAwB,YAAxB,CAAjB;AACAX,UAAMY,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8CJ,WAAWK,WAAzD;AACAf,UAAMY,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,6BAA5B,IAA6DJ,WAAWM,wBAAxE;AACA,SAAKC,KAAL,GAAcjB,MAAMkB,MAAN,CAAa;AACvBC,eAASX,UAAUY,aAAV,EADc;AAEvBC,eAASX,WAAWY,WAFG;AAGvBC,uBAAiB,KAHM,CAGA;;AAHA,KAAb,CAAd;AAKH,G,CAAA;;AAED;;;;;;;;oCAIgBC,c,EAAe;AAAA;;AAC3B,UAAIC,kBAAkB,EAAtB;;AACA,UAAID,kBAAkBA,0BAA0BE,KAAhD,EAAsD;AAClDF,uBAAeG,KAAf,CAAqBC,OAArB,CAA6B,gBAAQ;AACjCH,0BAAgBI,IAAhB,CAAqB,MAAKC,UAAL,CAAgBC,KAAKC,MAArB,EAA4BD,KAAKE,UAAjC,EAA4CF,KAAKG,WAAjD,EAA6DH,KAAKI,UAAlE,CAArB;AACH,SAFD;AAGH;;AACD,aAAO,KAAKlB,KAAL,CAAWmB,GAAX,CAAeX,eAAf,CAAP;AACH;AAGD;;;;;;;;;;;4BAQQY,M,EAAOL,M,EAAOC,U,EAAWC,W,EAAYC,U,EAAW;AACpD,UAAIG,aAAa,IAAjB;AACA,UAAIC,UAAU,IAAd;;AACA,cAAQF,MAAR;AACI,aAAK,KAAL;AAAW;AACP;AACAC,uBAAa,KAAKhC,YAAL,CAAkBkC,gBAAlB,CAAmCR,MAAnC,EAA2CC,UAA3C,CAAb,CAFJ,CAGI;;AACAK,uBAAa,KAAKG,cAAL,CAAoBH,UAApB,EAAgCJ,WAAhC,CAAb,CAJJ,CAKI;;AACAK,oBAAU,KAAKG,cAAL,CAAoBV,MAApB,EAA4BM,UAA5B,EAAuCJ,WAAvC,EAAmDC,UAAnD,CAAV,CANJ,CAM6E;;AACzE;AARR;;AAUA,aAAOI,OAAP;AACH;AAED;;;;;;;;;;mCAOeP,M,EAAOM,U,EAAWJ,W,EAAYC,U,EAAW;AACpDH,eAASA,OAAOW,WAAP,EAAT;AACA,UAAIJ,UAAU,IAAd;;AACA,cAAQP,MAAR;AACI,aAAK,MAAL;AACI;AACA,cAAIY,iBAAiB,KAAKC,cAAL,CAAoBP,UAApB,EAAgCJ,WAAhC,CAArB;AACAK,oBAAU,KAAKtB,KAAL,CAAWH,IAAX,CAAgBwB,WAAWQ,GAAX,GAAiBF,cAAjC,EAAiDT,UAAjD,CAAV;AACA;;AACJ,aAAK,KAAL;AACI;AACAI,oBAAU,KAAKtB,KAAL,CAAW8B,GAAX,CAAeT,WAAWQ,GAA1B,EAA+B;AACrCE,oBAAQd,WAD6B;AAErCe,kBAAMd;AAF+B,WAA/B,CAAV;AAIA;;AACJ,aAAK,KAAL;AACI;AACA;;AACJ,aAAK,KAAL;AACI;AACA;;AACJ;AACI;AACAI,oBAAU,KAAKtB,KAAL,CAAW8B,GAAX,CAAeT,WAAWQ,GAA1B,EAA+B;AACrCE,oBAAQd,WAD6B;AAErCe,kBAAMd;AAF+B,WAA/B,CAAV;AAIA;AAzBR;;AA2BA,aAAOI,OAAP;AACH;AAED;;;;AAIA;;;;mCACeD,U,EAAWJ,W,EAAY;AAClC,UAAIgB,SAASZ,UAAb;;AACA,UAAIA,cAAcA,WAAWa,cAAX,CAA0B,KAA1B,CAAlB,EAAmD;AAC/C,YAAIC,UAAUd,WAAWQ,GAAzB;AACA,YAAIE,SAASI,QAAQC,KAAR,CAAc,UAAd,CAAb;;AACA,YAAIL,MAAJ,EAAW;AACPA,iBAAOpB,OAAP,CAAe,gBAAQ;AACnB,gBAAI0B,UAAUvB,KAAKwB,OAAL,CAAa,GAAb,EAAiB,EAAjB,EAAqBA,OAArB,CAA6B,GAA7B,EAAiC,EAAjC,CAAd;;AACA,gBAAIrB,eAAeA,YAAYiB,cAAZ,CAA2BG,OAA3B,CAAnB,EAAuD;AACnDF,wBAAUA,QAAQG,OAAR,CAAgB,MAAMD,OAAN,GAAgB,GAAhC,EAAqCpB,YAAYoB,OAAZ,CAArC,CAAV;AACH;AACJ,WALD;AAMH;;AACDhB,mBAAWQ,GAAX,GAAiBM,OAAjB;AACH;;AACD,aAAOF,MAAP;AACH;AAGD;;;;;;;;;+BAMWjB,U,EAAYC,W,EAAaC,U,EAAY;AAC5C,aAAO,KAAKqB,OAAL,CAAa,KAAb,EAAoB,KAApB,EAA2BvB,UAA3B,EAAuCC,WAAvC,EAAoDC,UAApD,CAAP;AACH;AAED;;;;;;;;;gCAMYF,U,EAAYC,W,EAAaC,U,EAAY;AAC7C,aAAO,KAAKqB,OAAL,CAAa,KAAb,EAAoB,MAApB,EAA4BvB,UAA5B,EAAwCC,WAAxC,EAAqDC,UAArD,CAAP;AACH;;;mCAEcG,U,EAAYJ,W,EAAa;AACpC,UAAIU,iBAAiB,EAArB;;AACA,UAAIV,WAAJ,EAAiB;AACb,YAAII,cAAcA,WAAWQ,GAAX,CAAeW,OAAf,CAAuB,GAAvB,IAA8B,CAAC,CAAjD,EAAoD;AAChDb,2BAAiB,GAAjB;AACH,SAFD,MAEO;AACHA,2BAAiB,GAAjB;AACH;;AACD,aAAK,IAAIc,CAAT,IAAcxB,WAAd,EAA2B;AACvBU,4BAAkB,MAAMc,CAAN,GAAU,GAAV,GAAgBxB,YAAYwB,CAAZ,CAAlC;AACH;AACJ;;AACD,aAAOd,cAAP;AACH;;;kCAImB;AAChB,UAAI,CAACzC,SAASC,aAAd,EAA4B;AACxBD,iBAASC,aAAT,GAAyB,IAAID,QAAJ,EAAzB;AACH;;AACD,aAAOA,SAASC,aAAhB;AACH;;;;;;AAIL,eAAeD,QAAf","sourceRoot":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web","sourcesContent":["import axios from \"axios\";\nimport AppConfig from '../config/AppConfig';\nimport ActionConfig  from '../config/ActionConfig';\n\n/**\n * \n */\nclass HttpUtil {\n\n    constructor(){\n        if (HttpUtil.instantiation){\n            throw new Error(\"This class has been instantiated and can be retrieved using the 'HttpUtil.getHttpUtil()' method.\");\n        }\n        this.actionConfig = ActionConfig.getActionConfig();\n        /** 初始化网络请求 **/\n        var appConfig = AppConfig.getAppConfig();\n        var httpConfig = appConfig.getConfigData(\"httpConfig\");\n        axios.defaults.headers.post['Content-Type'] = httpConfig.contentType;\n        axios.defaults.headers.post['Access-Control-Allow-Origin'] = httpConfig.AccessControlAllowOrigin;\n        this.$http  = axios.create({\n            baseURL: appConfig.getAppGateway(),\n            timeout: httpConfig.httpTimeout,\n            withCredentials: false // default\n        });\n    }// constructor\n\n    /**\n     * 批量获取请求，等待所有请求都返回是触发\n     * @param {请求参数数组} queryInfoArray  [{method,actionCode,queryParams,submitData},{...},...]\n     */\n    getAppBatchData(queryInfoArray){\n        let queryPromiseArr = [];\n        if (queryInfoArray && queryInfoArray instanceof Array){\n            queryInfoArray.array.forEach(item => {\n                queryPromiseArr.push(this.getAppData(item.method,item.actionCode,item.queryParams,item.submitData));\n            });\n        }\n        return this.$http.all(queryPromiseArr);\n    }\n\n\n    /**\n     * 获取网络数据\n     * @param {域名或者微服务名，默认为appConfig} domain \n     * @param {请求方法 GET,POST,DEL,PUT} method\n     * @param {ActionConfig中配置的Code} actionCode \n     * @param {URL请求URL参数} queryParams\n     * @param {POST请求是携带的参数} submitData \n     */\n    getData(domain,method,actionCode,queryParams,submitData){\n        let actionInfo = null;\n        let promise = null;\n        switch (domain) {\n            case \"APP\"://目前只有APP域\n                //获取Action信息\n                actionInfo = this.actionConfig.getAppActionInfo(method, actionCode);\n                //加工构建Action信息\n                actionInfo = this.restfulProcess(actionInfo, queryParams);\n                //构建网络请求并且返回Promise对象\n                promise = this.buildHttpQuery(method, actionInfo,queryParams,submitData);//\n                break;\n        }\n        return promise;\n    }\n\n    /**\n     * 构建HTTP请求，并且返回一个Promise对象\n     * @param {HTTP请求方式} method \n     * @param {Action信息} actionInfo \n     * @param {请求参数} queryParams \n     * @param {提交数据} submitData \n     */\n    buildHttpQuery(method,actionInfo,queryParams,submitData){\n        method = method.toUpperCase();\n        let promise = null;\n        switch (method) {\n            case \"POST\":\n                //构建POST请求\n                var queryParamsStr = this.queryStringify(actionInfo, queryParams);\n                promise = this.$http.post(actionInfo.url + queryParamsStr, submitData);\n                break;\n            case \"GET\":\n                //构建GET请求\n                promise = this.$http.get(actionInfo.url, {\n                    params: queryParams,\n                    data: submitData\n                });\n                break;\n            case \"DEL\":\n                //构建DEL请求\n                break;\n            case \"PUT\":\n                //构建PUT请求\n                break;\n            default:\n                //默认为GET请求\n                promise = this.$http.get(actionInfo.url, {\n                    params: queryParams,\n                    data: submitData\n                });\n                break;\n        }\n        return promise;\n    }\n\n    /** \n     * RESTFulurl结构处理\n     * @param {actionConfig 配置信息} actionInfo \n     */\n    //\"/user/{userid}/kkk/list/{abcde}/ddd\".match(/\\{\\w+\\}/g)\n    restfulProcess(actionInfo,queryParams){\n        let result = actionInfo;\n        if (actionInfo && actionInfo.hasOwnProperty(\"url\")){\n            let tempUrl = actionInfo.url;\n            let params = tempUrl.match(/\\{\\w+\\}/g);\n            if (params){\n                params.forEach(item => {\n                    let propKey = item.replace(\"{\",\"\").replace(\"}\",\"\");\n                    if (queryParams && queryParams.hasOwnProperty(propKey)){\n                        tempUrl = tempUrl.replace(\"{\" + propKey + \"}\", queryParams[propKey])\n                    }\n                });\n            }\n            actionInfo.url = tempUrl;\n        }\n        return result;\n    }\n\n\n    /**\n     * GET方式获取App域的网络数据\n     * @param {ActionConfig中对应APP域中配置的ActionCode} actionCode \n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    getAppData(actionCode, queryParams, submitData) {\n        return this.getData(\"APP\", \"GET\", actionCode, queryParams, submitData);\n    }\n\n    /**\n     * POST方式获取App域的网络数据\n     * @param {ActionConfig中对应APP域中配置的ActionCode} actionCode \n     * @param {url请求参数} queryParams \n     * @param {HTTP提交参数} submitData \n     */\n    postAppData(actionCode, queryParams, submitData) {\n        return this.getData(\"APP\", \"POST\", actionCode, queryParams, submitData);\n    }\n\n    queryStringify(actionInfo, queryParams) {\n        var queryParamsStr = \"\";\n        if (queryParams) {\n            if (actionInfo && actionInfo.url.indexOf(\"?\") > -1) {\n                queryParamsStr = \"&\"\n            } else {\n                queryParamsStr = \"?\"\n            }\n            for (var p in queryParams) {\n                queryParamsStr += \"&\" + p + \"=\" + queryParams[p]\n            }\n        }\n        return queryParamsStr\n    }\n    \n\n\n    static getHttpUtil(){\n        if (!HttpUtil.instantiation){\n            HttpUtil.instantiation = new HttpUtil();\n        }\n        return HttpUtil.instantiation;\n    }\n\n}\n\nexport default HttpUtil;"]}]}