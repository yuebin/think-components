{"remainingRequest":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js??ref--13-0!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/config/ActionConfig.js","dependencies":[{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/config/ActionConfig.js","mtime":1532230210000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/cache-loader/dist/cjs.js","mtime":1550646442000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js","mtime":1550646421000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js","mtime":1550646431000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\n\n/**\n * ActionConfig为网络请求的统一配置类。\n * 此配置遵循RESTful接口设计\n * 可以使用 {params}通配参数\n * actionConfig中的属性 appAction 在单应用中可以立即为域，在微服务中可以立即为微服务名\n */\nvar ActionConfig =\n/*#__PURE__*/\nfunction () {\n  function ActionConfig() {\n    _classCallCheck(this, ActionConfig);\n\n    if (ActionConfig.instantiation) {\n      //如果此类已经新建，则再次新建是报错\n      throw new Error(\"This class has been instantiated and can be retrieved using the 'ActionConfig.getActionConfig()' method.\");\n    }\n\n    this.actionConfig = {\n      appAction: {\n        //appAction 在单应用中可以立即为域，在微服务中可以立即为微服务名\n        POST: {\n          UserInfo: {\n            url: \"/user/{userid}\"\n          },\n          //保存用户信息\n          Login: {\n            url: \"/admin/login\"\n          }\n        },\n        GET: {\n          UserInfo: {\n            url: \"/user/{userid}\"\n          },\n          //获取用户信息\n          wheatherInfo: {\n            url: \"data/sk/{cityId}.html\" //获取天气预报信息//101010100\n\n          }\n        },\n        DEL: {\n          UserInfo: {\n            url: \"/user/{userid}\" //删除用户信息\n\n          }\n        },\n        PUT: {\n          UserInfo: {\n            url: \"/user/{userid}\" //修改用户信息\n\n          }\n        },\n        HEAD: {},\n        OPTIONS: {}\n      } //Action配置类，其属性不容许在代码中修改，如果需要修改，需要修改源码\n\n    };\n    Object.defineProperty(this, \"actionConfig\", {\n      configurable: true,\n      writable: false\n    });\n  }\n  /**\n   * 获取Action信息\n   * @param {域名或者微服务名} msName \n   * @param {方法} method \n   * @param {Action code} code \n   */\n\n\n  _createClass(ActionConfig, [{\n    key: \"getActionInfo\",\n    value: function getActionInfo(msName, method, code) {\n      if (this.actionConfig[msName] //服务名称\n      && this.actionConfig[msName][method] //方法\n      && this.actionConfig[msName][method][code]) {\n        return this.actionConfig[msName][method][code];\n      } else {\n        console.log(\"Action \" + code + \" does not exist.\");\n        return null;\n      }\n    }\n    /**\n     * 获取appConfig配置的Action信息\n     * @param {方法} method \n     * @param {code} code \n     */\n\n  }, {\n    key: \"getAppActionInfo\",\n    value: function getAppActionInfo(method, code) {\n      var msServiceName = \"appAction\";\n      return this.getActionInfo(msServiceName, method, code);\n    }\n  }], [{\n    key: \"getActionConfig\",\n    value: function getActionConfig() {\n      if (!ActionConfig.instantiation) {\n        ActionConfig.instantiation = new ActionConfig();\n      }\n\n      return ActionConfig.instantiation;\n    }\n  }]);\n\n  return ActionConfig;\n}();\n\nexport default ActionConfig;",{"version":3,"sources":["src/config/ActionConfig.js"],"names":["ActionConfig","instantiation","Error","actionConfig","appAction","POST","UserInfo","url","Login","GET","wheatherInfo","DEL","PUT","HEAD","OPTIONS","Object","defineProperty","configurable","writable","msName","method","code","console","log","msServiceName","getActionInfo"],"mappings":";;;AAAA;;;;;;IAMMA,Y;;;AAEF,0BAAa;AAAA;;AACT,QAAIA,aAAaC,aAAjB,EAA+B;AAC3B;AACA,YAAM,IAAIC,KAAJ,CAAU,0GAAV,CAAN;AACH;;AACD,SAAKC,YAAL,GAAoB;AAChBC,iBAAW;AAAC;AACRC,cAAK;AACDC,oBAAU;AAACC,iBAAK;AAAN,WADT;AACiC;AAClCC,iBAAO;AAAED,iBAAI;AAAN;AAFN,SADE;AAKPE,aAAI;AACAH,oBAAU;AAAEC,iBAAI;AAAN,WADV;AACkC;AAClCG,wBAAc;AAAEH,iBAAK,uBAAP,CAAgC;;AAAhC;AAFd,SALG;AASPI,aAAI;AACAL,oBAAU;AAAEC,iBAAK,gBAAP,CAAwB;;AAAxB;AADV,SATG;AAYPK,aAAI;AACAN,oBAAU;AAAEC,iBAAK,gBAAP,CAAyB;;AAAzB;AADV,SAZG;AAePM,cAAK,EAfE;AAiBPC,iBAAQ;AAjBD,OADK,CAuBpB;;AAvBoB,KAApB;AAwBAC,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,cAA5B,EAA4C;AAAEC,oBAAc,IAAhB;AAAsBC,gBAAU;AAAhC,KAA5C;AACH;AAED;;;;;;;;;;kCAMcC,M,EAAQC,M,EAAQC,I,EAAK;AAC/B,UAAI,KAAKlB,YAAL,CAAkBgB,MAAlB,EAA0B;AAA1B,SACG,KAAKhB,YAAL,CAAkBgB,MAAlB,EAA0BC,MAA1B,CADH,CACoC;AADpC,SAEG,KAAKjB,YAAL,CAAkBgB,MAAlB,EAA0BC,MAA1B,EAAkCC,IAAlC,CAFP,EAE+C;AAC3C,eAAO,KAAKlB,YAAL,CAAkBgB,MAAlB,EAA0BC,MAA1B,EAAkCC,IAAlC,CAAP;AACH,OAJD,MAIK;AACDC,gBAAQC,GAAR,CAAY,YAAYF,IAAZ,GAAmB,kBAA/B;AACA,eAAO,IAAP;AACH;AACJ;AAED;;;;;;;;qCAKiBD,M,EAAOC,I,EAAK;AACzB,UAAIG,gBAAe,WAAnB;AACA,aAAO,KAAKC,aAAL,CAAmBD,aAAnB,EAAiCJ,MAAjC,EAAwCC,IAAxC,CAAP;AACH;;;sCAEwB;AACrB,UAAI,CAACrB,aAAaC,aAAlB,EAAiC;AAC7BD,qBAAaC,aAAb,GAA6B,IAAID,YAAJ,EAA7B;AACH;;AACD,aAAOA,aAAaC,aAApB;AACH;;;;;;AAGL,eAAeD,YAAf","sourceRoot":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web","sourcesContent":["/**\n * ActionConfig为网络请求的统一配置类。\n * 此配置遵循RESTful接口设计\n * 可以使用 {params}通配参数\n * actionConfig中的属性 appAction 在单应用中可以立即为域，在微服务中可以立即为微服务名\n */\nclass ActionConfig {\n    \n    constructor(){\n        if (ActionConfig.instantiation){\n            //如果此类已经新建，则再次新建是报错\n            throw new Error(\"This class has been instantiated and can be retrieved using the 'ActionConfig.getActionConfig()' method.\");\n        }\n        this.actionConfig = {\n            appAction: {//appAction 在单应用中可以立即为域，在微服务中可以立即为微服务名\n                POST:{\n                    UserInfo: {url: \"/user/{userid}\"},//保存用户信息\n                    Login: { url:\"/admin/login\"}\n                },\n                GET:{\n                    UserInfo: { url:\"/user/{userid}\"},//获取用户信息\n                    wheatherInfo: { url: \"data/sk/{cityId}.html\" }//获取天气预报信息//101010100\n                },\n                DEL:{\n                    UserInfo: { url: \"/user/{userid}\"}//删除用户信息\n                },\n                PUT:{\n                    UserInfo: { url: \"/user/{userid}\" }//修改用户信息\n                },\n                HEAD:{\n                },\n                OPTIONS:{\n                }\n            }\n        }        \n\n        //Action配置类，其属性不容许在代码中修改，如果需要修改，需要修改源码\n        Object.defineProperty(this, \"actionConfig\", { configurable: true, writable: false });\n    }\n\n    /**\n     * 获取Action信息\n     * @param {域名或者微服务名} msName \n     * @param {方法} method \n     * @param {Action code} code \n     */\n    getActionInfo(msName, method, code){\n        if (this.actionConfig[msName] //服务名称\n            && this.actionConfig[msName][method]//方法\n            && this.actionConfig[msName][method][code]){\n            return this.actionConfig[msName][method][code]\n        }else{\n            console.log(\"Action \" + code + \" does not exist.\");\n            return null;\n        }\n    }\n\n    /**\n     * 获取appConfig配置的Action信息\n     * @param {方法} method \n     * @param {code} code \n     */\n    getAppActionInfo(method,code){\n        var msServiceName =\"appAction\";\n        return this.getActionInfo(msServiceName,method,code);   \n    }\n\n    static getActionConfig() {\n        if (!ActionConfig.instantiation) {\n            ActionConfig.instantiation = new ActionConfig();\n        }\n        return ActionConfig.instantiation;\n    }\n}\n\nexport default ActionConfig;"]}]}