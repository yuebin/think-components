{"remainingRequest":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js??ref--13-0!/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/config/ActionConfig.js","dependencies":[{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/src/config/ActionConfig.js","mtime":1551063897000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/cache-loader/dist/cjs.js","mtime":1550646442000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/babel-loader/lib/index.js","mtime":1550646421000},{"path":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/eslint-loader/index.js","mtime":1550646431000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\nimport AdmApi from \"../api/AdmApi\";\nimport AppApi from \"../api/AppApi\";\nimport DevApi from \"../api/DevApi\";\n/**\n * ActionConfig为网络请求的统一配置类。\n * 此配置遵循RESTful接口设计\n * 可以使用 {params}通配参数\n * actionConfig中的属性 appAction 在单应用中可以立即为域，在微服务中可以立即为微服务名\n */\n\nvar ActionConfig =\n/*#__PURE__*/\nfunction () {\n  function ActionConfig() {\n    _classCallCheck(this, ActionConfig);\n\n    if (ActionConfig.instantiation) {\n      //如果此类已经新建，则再次新建是报错\n      throw new Error(\"This class has been instantiated and can be retrieved using the 'ActionConfig.getActionConfig()' method.\");\n    }\n\n    this.actions = {\n      //Action配置文件引入点\n      \"adm\": new AdmApi(),\n      \"app\": new AppApi(),\n      \"dev\": new DevApi()\n    };\n  }\n  /**\n   * 获取Action信息\n   * @param {域名或者微服务名} msName \n   * @param {方法} method \n   * @param {Action code} code \n   */\n\n\n  _createClass(ActionConfig, [{\n    key: \"getActionInfo\",\n    value: function getActionInfo(msName, method, code) {\n      if (this.actions[msName] //服务名称\n      && this.actions[msName][method] //方法\n      && this.actions[msName][method][code]) {\n        return {\n          url: \"\".concat(msName).concat(this.actions[msName][method][code].url)\n        }; //this.actions[msName][method][code]\n      } else {\n        console.log(\"Action \" + code + \" does not exist.\");\n        return null;\n      }\n    }\n    /**\n     * 获取appConfig配置的Action信息\n     * @param {方法} method \n     * @param {code} code \n     */\n\n  }, {\n    key: \"getAppActionInfo\",\n    value: function getAppActionInfo(method, code) {\n      var msServiceName = \"app\";\n      return this.getActionInfo(msServiceName, method, code);\n    }\n  }]);\n\n  return ActionConfig;\n}();\n\nexport default ActionConfig;",{"version":3,"sources":["src/config/ActionConfig.js"],"names":["AdmApi","AppApi","DevApi","ActionConfig","instantiation","Error","actions","msName","method","code","url","console","log","msServiceName","getActionInfo"],"mappings":";;AAAA,OAAOA,MAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA;;;;;;;IAMMC,Y;;;AAEF,0BAAa;AAAA;;AACT,QAAIA,aAAaC,aAAjB,EAA+B;AAC3B;AACA,YAAM,IAAIC,KAAJ,CAAU,0GAAV,CAAN;AACH;;AACD,SAAKC,OAAL,GAAe;AAAC;AACZ,aAAO,IAAIN,MAAJ,EADI;AAEX,aAAO,IAAIC,MAAJ,EAFI;AAGX,aAAO,IAAIC,MAAJ;AAHI,KAAf;AAKH;AAED;;;;;;;;;;kCAMcK,M,EAAQC,M,EAAQC,I,EAAK;AAC/B,UAAI,KAAKH,OAAL,CAAaC,MAAb,EAAqB;AAArB,SACG,KAAKD,OAAL,CAAaC,MAAb,EAAqBC,MAArB,CADH,CAC+B;AAD/B,SAEG,KAAKF,OAAL,CAAaC,MAAb,EAAqBC,MAArB,EAA6BC,IAA7B,CAFP,EAE0C;AACtC,eAAO;AAAEC,yBAAQH,MAAR,SAAiB,KAAKD,OAAL,CAAaC,MAAb,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,GAApD;AAAF,SAAP,CADsC,CAC8B;AACvE,OAJD,MAIK;AACDC,gBAAQC,GAAR,CAAY,YAAYH,IAAZ,GAAmB,kBAA/B;AACA,eAAO,IAAP;AACH;AACJ;AAED;;;;;;;;qCAKiBD,M,EAAOC,I,EAAK;AACzB,UAAII,gBAAe,KAAnB;AACA,aAAO,KAAKC,aAAL,CAAmBD,aAAnB,EAAiCL,MAAjC,EAAwCC,IAAxC,CAAP;AACH;;;;;;AAIL,eAAeN,YAAf","sourceRoot":"/Users/mike/Documents/github/ThinkComponents/20.code/think-components/web","sourcesContent":["import AdmApi  from \"../api/AdmApi\";\nimport AppApi from \"../api/AppApi\";\nimport DevApi from \"../api/DevApi\";\n/**\n * ActionConfig为网络请求的统一配置类。\n * 此配置遵循RESTful接口设计\n * 可以使用 {params}通配参数\n * actionConfig中的属性 appAction 在单应用中可以立即为域，在微服务中可以立即为微服务名\n */\nclass ActionConfig {\n    \n    constructor(){\n        if (ActionConfig.instantiation){\n            //如果此类已经新建，则再次新建是报错\n            throw new Error(\"This class has been instantiated and can be retrieved using the 'ActionConfig.getActionConfig()' method.\");\n        }\n        this.actions = {//Action配置文件引入点\n            \"adm\": new AdmApi(),\n            \"app\": new AppApi(),\n            \"dev\": new DevApi()\n        }\n    }\n\n    /**\n     * 获取Action信息\n     * @param {域名或者微服务名} msName \n     * @param {方法} method \n     * @param {Action code} code \n     */\n    getActionInfo(msName, method, code){\n        if (this.actions[msName] //服务名称\n            && this.actions[msName][method]//方法\n            && this.actions[msName][method][code]){\n            return { url: `${msName}${this.actions[msName][method][code].url}`};//this.actions[msName][method][code]\n        }else{\n            console.log(\"Action \" + code + \" does not exist.\");\n            return null;\n        }\n    }\n\n    /**\n     * 获取appConfig配置的Action信息\n     * @param {方法} method \n     * @param {code} code \n     */\n    getAppActionInfo(method,code){\n        var msServiceName =\"app\";\n        return this.getActionInfo(msServiceName,method,code);   \n    }\n\n}\n\nexport default ActionConfig;"]}]}